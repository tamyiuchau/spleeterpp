<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="spleeter_8cc" kind="file" language="C++">
    <compoundname>spleeter.cc</compoundname>
    <includes refid="spleeter_8h" local="yes">spleeter/spleeter.h</includes>
    <includes refid="model_8h" local="yes">spleeter/model.h</includes>
    <includes refid="spleeter__common_8h" local="yes">spleeter_common/spleeter_common.h</includes>
    <incdepgraph>
      <node id="56">
        <label>spleeter/model.h</label>
        <link refid="model_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>functional</label>
      </node>
      <node id="54">
        <label>spleeter_common/spleeter_common.h</label>
        <link refid="spleeter__common_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>Eigen/Core</label>
      </node>
      <node id="50">
        <label>string</label>
      </node>
      <node id="52">
        <label>unordered_set</label>
      </node>
      <node id="55">
        <label>spleeter_common/type.h</label>
        <link refid="type_8h_source"/>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>vector</label>
      </node>
      <node id="48">
        <label>/code/src/spleeter/spleeter.cc</label>
        <link refid="spleeter_8cc"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>iostream</label>
      </node>
      <node id="58">
        <label>spleeter_common/tf_handle.h</label>
        <link refid="tf__handle_8h_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>spleeter/spleeter.h</label>
        <link refid="spleeter_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>tensorflow/c/c_api.h</label>
      </node>
      <node id="51">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacespleeter">spleeter</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;spleeter/spleeter.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spleeter/model.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spleeter_common/spleeter_common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacespleeter" kindref="compound">spleeter</ref><sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">std::vector&lt;std::string&gt;<sp/>GetOutputNames(SeparationType<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Found<sp/>using<sp/>the<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>$&gt;<sp/>saved_model_cli<sp/>show<sp/>--dir<sp/>_deps/spleeter-build/exported/Xstems<sp/>--all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TwoStems:</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight><highlight class="stringliteral">&quot;strided_slice_13&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;strided_slice_23&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FourStems:</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight><highlight class="stringliteral">&quot;strided_slice_13&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;strided_slice_23&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;strided_slice_33&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;strided_slice_43&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FiveStems:</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight><highlight class="stringliteral">&quot;strided_slice_18&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;strided_slice_38&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;strided_slice_48&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;strided_slice_28&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;strided_slice_58&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Split(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Waveform<sp/>&amp;input,<sp/>Waveform<sp/>*vocals,<sp/>Waveform<sp/>*accompaniment,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::error_code<sp/>&amp;err)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>std::vector&lt;TFHandlePtr&lt;TF_Tensor&gt;&gt;<sp/>tf_output;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>RunModel(input,<sp/>TwoStems,<sp/>GetOutputNames(TwoStems),<sp/>&amp;tf_output,<sp/>err);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>SetOutput(tf_output,<sp/>input.cols(),<sp/>{vocals,<sp/>accompaniment});</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Split(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Waveform<sp/>&amp;input,<sp/>Waveform<sp/>*vocals,<sp/>Waveform<sp/>*drums,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Waveform<sp/>*bass,<sp/>Waveform<sp/>*other,<sp/>std::error_code<sp/>&amp;err)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>std::vector&lt;TFHandlePtr&lt;TF_Tensor&gt;&gt;<sp/>tf_output;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>RunModel(input,<sp/>FourStems,<sp/>GetOutputNames(FourStems),<sp/>&amp;tf_output,<sp/>err);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>SetOutput(tf_output,<sp/>input.cols(),<sp/>{vocals,<sp/>drums,<sp/>bass,<sp/>other});</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Split(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Waveform<sp/>&amp;input,<sp/>Waveform<sp/>*vocals,<sp/>Waveform<sp/>*drums,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Waveform<sp/>*bass,<sp/>Waveform<sp/>*piano,<sp/>Waveform<sp/>*other,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::error_code<sp/>&amp;err)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>std::vector&lt;TFHandlePtr&lt;TF_Tensor&gt;&gt;<sp/>tf_output;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>RunModel(input,<sp/>FiveStems,<sp/>GetOutputNames(FiveStems),<sp/>&amp;tf_output,<sp/>err);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>SetOutput(tf_output,<sp/>input.cols(),</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{vocals,<sp/>drums,<sp/>bass,<sp/>piano,<sp/>other});</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>spleeter</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/code/src/spleeter/spleeter.cc"/>
  </compounddef>
</doxygen>
